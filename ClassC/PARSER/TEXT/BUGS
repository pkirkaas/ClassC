1)	In multiple inheritance, derived class takes the LAST
	rather than the first ancestor as the default for
	member functions.

2)	Should allow derived class function definition to call
	ancestor class member function by "Parent::memFnc()" rather
	than "_Parent_memFnc(self);"

3)	Should allow an empty component list for a class declaration --
	consider a multiple inheritance when all that is needed is
	the combination of the ancestor components.

4)	There is a redundancy -- both the object itself and each entry in
	the object table have a slot for the pointer to the array of refels.
	Currently, the slot in the object itself is never filled, but 
	this could easily be done in "new".  Maybe a lot more
	could be done in new as well, like making function pointers as
	members of objects and initializing them there.

Mon Jun 19 02:57:02 PDT 1989
5)	Add a built-in copy.  Made easy by 6) below -- just do a new & 
	a struct copy.  Can have like new -- if user defined copy, enhance

6)	Allow objects to accept the message ":>new();".  Not so hard; must:
	    a)  Cast the return to be the same type as the object variable.
	    b)  get the size & other data from that object's objTbl entry.

7)	add a "isa" built in -- see NarTree project "isa" for a model.

8)	Real bug -- accepts bad assignement:
	 class Samp { char *comp[20]; }; samp:>comp = (char *) ptr;

9)	Should tighten child component redeclared type -- allow only
	legitimate subtypes in redeclared components.
